{"version":3,"file":"static/js/278.6110e349.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/Carousel/image-carousel.tsx","components/ContentBlock/index.tsx","components/ContentBlock/styles.ts"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: ${(p) => p.color || \"#2e186a\"};\r\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(255, 130, 92);\r\n    background-color: rgb(255, 130, 92);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import React from \"react\";\nimport Slider from \"react-slick\";\nimport { SvgIcon } from \"../SvgIcon\"; // Assuming your SvgIcon component works for local SVGs\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\"; // Using Ant Design icons\n\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\n// Custom Previous Arrow\nconst PrevArrow = (props: any) => {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{\n                ...style,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                left: \"-0px\",\n                zIndex: 1,\n                width: \"40px\",\n                height: \"40px\",\n                backgroundColor: \"#18216d\", // Dark background\n                borderRadius: \"50%\",\n            }}\n            onClick={onClick}\n        >\n\n        </div>\n    );\n};\n\n// Custom Next Arrow\nconst NextArrow = (props: any) => {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{\n                ...style,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                right: \"-0px\",\n                zIndex: 1,\n                width: \"40px\",\n                height: \"40px\",\n                backgroundColor: \"#18216d\", // Dark background\n                borderRadius: \"50%\",\n            }}\n            onClick={onClick}\n        >\n\n        </div>\n    );\n};\n\n// Slider settings\nconst settings = {\n    dots: true,\n    lazyLoad: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    initialSlide: 0,\n    arrows: true,\n    prevArrow: <PrevArrow />,\n    nextArrow: <NextArrow />,\n};\n\n// Main Component\nconst ImageCarousel = ({ images }: { images: string[] }) => {\n    // If only one image, return SvgIcon directly\n    if (images.length === 1) {\n        return <SvgIcon src={images[0]} width=\"100%\" height=\"100%\" />;\n    }\n\n    // Else, return slider\n    return (\n        <Slider {...settings}>\n            {images.map((src, idx) => (\n                <div key={idx} >\n                    <SvgIcon src={src} width=\"84%\" height=\"600px\" />\n                </div>\n            ))}\n        </Slider>\n    );\n\n};\n\nexport default ImageCarousel;\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\nimport ImageCarousel from \"../../common/Carousel/image-carousel\";\r\n\r\nconst ContentBlock = ({\r\n  images,\r\n  title,\r\n  content,\r\n  github_url,\r\n  modules,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <ImageCarousel images={images} />\r\n          </Col>\r\n\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <MinTitle>{t(title)}</MinTitle>\r\n              <Content>{t(content)}</Content>\r\n\r\n              {direction === \"right\" ? (\r\n                <ButtonWrapper>\r\n                  {typeof button === \"object\" &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={() => scrollTo(\"contact\")}\r\n                          >\r\n                            {t(item.title)}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n              ) : (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {typeof section === \"object\" &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string;\r\n                            icon: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              <SvgIcon\r\n                                src={item.icon}\r\n                                width=\"60px\"\r\n                                height=\"60px\"\r\n                              />\r\n                              <MinTitle>{t(item.title)}</MinTitle>\r\n                              <MinPara>{t(item.content)}</MinPara>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 5rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n      line-height: 2;\r\n  color: #555;\r\n`;\r\n\r\ninterface StyledRowProps {\r\n  direction?: \"left\" | \"right\";\r\n}\r\n\r\nexport const StyledRow = styled(Row) <StyledRowProps>`\r\n  flex-direction: ${({ direction }) => (direction === \"left\" ? \"row\" : \"row-reverse\")};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  margin-bottom: 0.5rem;\r\n  color: #222;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n    line-height: 2;\r\n  color: #555;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveIcon = styled.img`\r\n  width: 160%;\r\n  height: 160%;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;"],"names":["StyledButton","styled","p","color","Button","_ref","children","onClick","_jsx","PrevArrow","props","className","style","display","alignItems","justifyContent","left","zIndex","width","height","backgroundColor","borderRadius","NextArrow","right","settings","dots","lazyLoad","infinite","speed","slidesToShow","slidesToScroll","initialSlide","arrows","prevArrow","nextArrow","images","length","SvgIcon","src","Slider","map","idx","withTranslation","title","content","github_url","modules","section","button","t","id","direction","ContentSection","Fade","triggerOnce","_jsxs","StyledRow","justify","align","Col","lg","md","sm","xs","ImageCarousel","ContentWrapper","MinTitle","Content","ButtonWrapper","item","document","getElementById","scrollIntoView","behavior","scrollTo","ServiceWrapper","Row","span","icon","MinPara","ResponsiveIcon","img"],"sourceRoot":""}